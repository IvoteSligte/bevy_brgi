use bevy::prelude::*;
use bevy::render::render_graph::NodeRunError;
use bevy::render::render_graph::{ViewNode, RenderGraphContext};
use bevy::render::renderer::RenderContext;
use bevy::render::view::ViewTarget;
use bevy::ecs::query::QueryItem;

#[derive(Default)]
pub struct CountProbesNode;

impl ViewNode for CountProbesNode {
    type ViewQuery = (&'static ViewTarget, &'static crate::BrgiMarker);

    fn run<'w>(
        &self,
        graph: &mut RenderGraphContext,
        render_context: &mut RenderContext<'w>,
        (view_target, _): QueryItem<Self::ViewQuery>,
        world: &'w World,
    ) -> Result<(), NodeRunError> {
        let pipeline_resource = world.resource::<CountProbesPipeline>();
        let pipeline_cache = world.resource::<PipelineCache>();

        let Some(pipeline) = pipeline_cache.get_compute_pipeline(pipeline_resource.pipeline_id) else {
            return Ok(());
        };


    }
}

#[derive(Resource, Default)]
pub struct CountProbesPipeline;



